import React, { useState, useMemo, useEffect, useCallback } from 'react';
import { AppChartConfig, SalesAndTrafficData, ProductDetails } from '../types';
import { styles } from '../styles';
import { formatNumber, formatPercent, formatPrice, getNested } from '../utils';
import { useResizableColumns, ResizableTh } from '../components/ResizableTable';
import { CustomizeColumnsModal } from '../components/CustomizeColumnsModal';
import { MoreOptionsIcon, SortIcon } from '../components/Icons';

const COLUMN_CONFIG_SALES = [
    { group: 'General', columns: [
        { id: 'childAsin', label: 'Child ASIN', alwaysVisible: true, format: 'text' },
        { id: 'parentAsin', label: 'Parent ASIN', format: 'text' },
    ]},
    { group: 'Traffic', columns: [
        { id: 'sessions', label: 'Sessions', format: 'number' },
        { id: 'pageViews', label: 'Page Views', format: 'number' },
        { id: 'featuredOfferPercentage', label: 'Featured Offer %', format: 'percent' },
        { id: 'unitSessionPercentage', label: 'Unit Session %', format: 'percent' },
    ]},
    { group: 'Sales', columns: [
        { id: 'unitsOrdered', label: 'Units Ordered', format: 'number' },
        { id: 'orderedProductSales', label: 'Ordered Product Sales', format: 'price' },
        { id: 'totalOrderItems', label: 'Total Order Items', format: 'number' },
        { id: 'averageSalesPerOrderItem', label: 'Avg Sales / Order Item', format: 'price' },
    ]},
];

const DEFAULT_VISIBLE_COLUMNS_SALES = new Set([
    'childAsin',
    'sessions', 'pageViews', 'unitSessionPercentage',
    'unitsOrdered', 'orderedProductSales', 'totalOrderItems',
]);

const TOTAL_COLUMNS_SALES = COLUMN_CONFIG_SALES.flatMap(g => g.columns).length;

export function SalesAndTrafficView({ setChartConfig }: { setChartConfig: (config: AppChartConfig | null) => void }) {
    const [selectedAsin, setSelectedAsin] = useState<string>('');
    const [productDetails, setProductDetails] = useState<ProductDetails | null>(null);
    const [loadingProductDetails, setLoadingProductDetails] = useState(false);
    const [selectedDate, setSelectedDate] = useState<string>(() => {
        const d = new Date();
        d.setDate(d.getDate() - 2); // Default to 2 days ago
        return d.toISOString().split('T')[0];
    });
    const [salesData, setSalesData] = useState<SalesAndTrafficData[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [hasAppliedFilters, setHasAppliedFilters] = useState(false);
    const [isCustomizeModalOpen, setIsCustomizeModalOpen] = useState(false);
    const [visibleColumns, setVisibleColumns] = useState<Set<string>>(DEFAULT_VISIBLE_COLUMNS_SALES);
    const [sortConfig, setSortConfig] = useState<{ key: string | null; direction: 'ascending' | 'descending' }>({ key: 'sessions', direction: 'descending' });

    const visibleColumnList = useMemo(() => {
        return COLUMN_CONFIG_SALES.flatMap(g => g.columns).filter(c => visibleColumns.has(c.id));
    }, [visibleColumns]);

    const initialWidths = useMemo(() => {
        return visibleColumnList.map(col => {
            if (col.id === 'childAsin') return 150;
            if (col.id === 'sku') return 180;
            return 150;
        });
    }, [visibleColumnList]);

    const { widths: columnWidths, getHeaderProps } = useResizableColumns(initialWidths);

    useEffect(() => {
        const fetchDetails = async () => {
            if (!selectedAsin) {
                setProductDetails(null);
                return;
            }
            setLoadingProductDetails(true);
            try {
                const response = await fetch(`http://localhost:3001/api/product-details?asins=${selectedAsin}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch product details');
                }
                const data: ProductDetails[] = await response.json();
                if (data.length > 0) {
                    setProductDetails(data[0]);
                } else {
                     setProductDetails({ asin: selectedAsin, error: 'Details not found.' });
                }
            } catch (error) {
                console.error("Error fetching product details:", error);
                setProductDetails({ asin: selectedAsin, error: 'Could not load details.' });
            } finally {
                setLoadingProductDetails(false);
            }
        };

        fetchDetails();
    }, [selectedAsin]);


    const handleApply = useCallback(async () => {
        if (!selectedDate) return;
        try {
            setHasAppliedFilters(true);
            setLoading(true);
            setError(null);
            let url = `http://localhost:3001/api/sales-and-traffic?date=${encodeURIComponent(selectedDate)}`;
            if (selectedAsin) {
                url += `&asin=${encodeURIComponent(selectedAsin)}`;
            }
            const response = await fetch(url);
            if (!response.ok) {
                 const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            const data: SalesAndTrafficData[] = await response.json();
            setSalesData(data);
        } catch (e) {
            setError(e instanceof Error ? `Failed to fetch data: ${e.message}` : 'An unknown error occurred.');
            setSalesData([]); // Clear data on error
        } finally {
            setLoading(false);
        }
    }, [selectedAsin, selectedDate]);

    const requestSort = (key: string) => {
        let direction: 'ascending' | 'descending' = 'descending';
        if (sortConfig.key === key && sortConfig.direction === 'descending') {
            direction = 'ascending';
        } else if (sortConfig.key === key && sortConfig.direction === 'ascending') {
            direction = 'descending';
        }
        setSortConfig({ key, direction });
    };

    const sortedSalesData = useMemo(() => {
        let sortableItems = [...salesData];
        if (sortConfig.key !== null) {
            sortableItems.sort((a, b) => {
                const aValue = getNested(a, sortConfig.key!);
                const bValue = getNested(b, sortConfig.key!);

                if (aValue === null || aValue === undefined) return 1;
                if (bValue === null || bValue === undefined) return -1;
                
                if (aValue < bValue) return sortConfig.direction === 'ascending' ? -1 : 1;
                if (aValue > bValue) return sortConfig.direction === 'ascending' ? 1 : -1;
                return 0;
            });
        }
        return sortableItems;
    }, [salesData, sortConfig]);

    const formatCell = (item: SalesAndTrafficData, columnId: string, format: string) => {
        const value = getNested(item, columnId);
        if (value === null || value === undefined) return '-';
        switch(format) {
            case 'number': return formatNumber(value);
            case 'percent': return formatPercent(value);
            case 'price': return formatPrice(value);
            default: return value;
        }
    };

    const renderContent = () => {
        if (loading) return <div style={styles.message}>Loading data...</div>;
        if (error) return null;

        if (!hasAppliedFilters) {
            return <div style={styles.message}>Please select a date and click "Apply" to view data.</div>;
        }
        
        if (sortedSalesData.length === 0) return <div style={styles.message}>No data available for the selected ASIN and date.</div>;

        const visibleColumnConfig = COLUMN_CONFIG_SALES.map(group => ({
            ...group,
            columns: group.columns.filter(col => visibleColumns.has(col.id))
        })).filter(group => group.columns.length > 0);

        return (
             <table style={styles.table}>
                <colgroup>
                    {columnWidths.map((width, i) => (
                        <col key={i} style={{ width: `${width}px` }} />
                    ))}
                </colgroup>
                <thead>
                    <tr>
                        {visibleColumnConfig.map(group => (
                            <th key={group.group} style={{...styles.th, ...styles.thCenter, ...styles.thGroup, ...(group.columns[0].alwaysVisible ? styles.stickyHeader : {})}} colSpan={group.columns.length}>
                                {group.group}
                            </th>
                        ))}
                    </tr>
                    <tr>
                        {visibleColumnList.map((col, index) => (
                            <ResizableTh
                                key={col.id}
                                index={index}
                                getHeaderProps={getHeaderProps}
                                sticky={col.alwaysVisible}
                            >
                                <div style={{...styles.thContent, cursor: 'pointer'}} onClick={() => requestSort(col.id)}>
                                    <span>{col.label}</span>
                                    <div>
                                        {sortConfig.key === col.id ? <SortIcon direction={sortConfig.direction} /> : <SortIcon direction="none" />}
                                        <MoreOptionsIcon />
                                    </div>
                                </div>
                            </ResizableTh>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    {sortedSalesData.map((item, index) => (
                        <tr key={`${item.childAsin}-${item.sku}-${index}`} style={styles.tr}>
                           {visibleColumnList.map(col => (
                                <td key={col.id} 
                                    style={{
                                        ...styles.td, 
                                        ...(col.alwaysVisible ? styles.stickyColumn : {}),
                                        ...(col.format !== 'text' ? styles.clickableCell : {}),
                                    }}
                                    onClick={col.format !== 'text' ? () => setChartConfig({
                                        type: 'sales',
                                        childAsin: item.childAsin,
                                        sku: item.sku!,
                                        metricId: col.id,
                                        metricLabel: col.label,
                                        metricFormat: col.format as 'number' | 'percent' | 'price',
                                    }) : undefined}
                                >
                                    {col.id === 'childAsin' || col.id === 'parentAsin' ? (
                                        <a href={`https://www.amazon.com/dp/${getNested(item, col.id)}`} target="_blank" rel="noopener noreferrer" style={styles.link}>
                                            {getNested(item, col.id)}
                                        </a>
                                    ) : (
                                        formatCell(item, col.id, col.format)
                                    )}
                                </td>
                           ))}
                        </tr>
                    ))}
                </tbody>
            </table>
        )
    };

    const filtersDisabled = loading || !!error;

    return (
        <div style={styles.viewContainer}>
            {isCustomizeModalOpen && (
                <CustomizeColumnsModal 
                    visibleColumns={visibleColumns}
                    onClose={() => setIsCustomizeModalOpen(false)}
                    onSave={setVisibleColumns}
                    columnConfig={COLUMN_CONFIG_SALES}
                />
            )}
            <header style={styles.header}>
                <div>
                    <h1 style={styles.title}>Sales & Traffic</h1>
                    <p style={styles.subtitle}>View detailed daily sales and traffic metrics for your products. This report provides key business insights including units ordered, revenue, sessions, and conversion rates, broken down by individual child ASINs.</p>
                </div>
            </header>
            <div style={styles.card}>
                <div style={styles.filterGroup}>
                    <label style={styles.label} htmlFor="asin-input-sales">ASIN</label>
                    <input
                        type="search"
                        id="asin-input-sales"
                        style={{...styles.input, width: '200px'}}
                        placeholder="Enter ASIN (or blank for all)"
                        value={selectedAsin}
                        onChange={e => setSelectedAsin(e.target.value)}
                        disabled={filtersDisabled}
                    />
                </div>
                <div style={styles.filterGroup}>
                    <label style={styles.label} htmlFor="range-select-sales">Reporting Range</label>
                    <select id="range-select-sales" style={styles.select} disabled={filtersDisabled}>
                        <option>Daily</option>
                    </select>
                </div>
                <div style={styles.filterGroup}>
                    <label style={styles.label} htmlFor="date-select-sales">Select day</label>
                    <input
                        type="date"
                        id="date-select-sales"
                        style={styles.input}
                        value={selectedDate}
                        onChange={e => setSelectedDate(e.target.value)}
                        disabled={filtersDisabled}
                    />
                </div>
                <button onClick={handleApply} style={styles.primaryButton} disabled={filtersDisabled || !selectedDate}>
                    {loading ? 'Loading...' : 'Apply'}
                </button>
                 <div style={styles.productInfoContainer}>
                    {loadingProductDetails ? (
                        <p style={{ margin: 0, color: 'var(--text-muted-color)' }}>Loading details...</p>
                    ) : productDetails ? (
                        <>
                            <img 
                                src={productDetails.imageUrl || 'https://via.placeholder.com/50x50.png?text=N/A'} 
                                alt={productDetails.title || 'Product image'} 
                                style={styles.productInfoImage} 
                            />
                            <div style={styles.productInfoText}>
                                <p style={styles.productInfoTitle} title={productDetails.title}>{productDetails.title || 'Title not available'}</p>
                                <p style={styles.productInfoAsin}>{productDetails.asin}</p>
                            </div>
                        </>
                    ) : (
                         <p style={{ margin: 0, color: 'var(--text-muted-color)' }}>Enter an ASIN to see details.</p>
                    )}
                </div>
            </div>

            {error && <div style={{...styles.error, padding: '1rem', backgroundColor: 'rgba(220, 53, 69, 0.05)', border: '1px solid rgba(220, 53, 69, 0.2)', borderRadius: 'var(--border-radius)', marginTop: '1rem' }}>{error}</div>}
            
             <main style={{ marginTop: '1.5rem' }}>
                <div style={styles.tableActions}>
                    <span style={styles.tableInfo}>Displaying {sortedSalesData.length} of {sortedSalesData.length} products</span>
                    <button style={styles.linkButton} onClick={() => setIsCustomizeModalOpen(true)}>
                        Customize Columns ({TOTAL_COLUMNS_SALES})
                    </button>
                </div>
                <div style={styles.tableContainer}>
                    {renderContent()}
                </div>
            </main>
        </div>
    );
}